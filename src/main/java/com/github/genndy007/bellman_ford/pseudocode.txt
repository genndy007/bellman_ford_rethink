# one thread doing
procedure thread_task(edges_subarray) {
    for edge (start, end, weight) in edges_subarray do
        vertices[end].distance = min(
            vertices[end].distance,
            vertices[start].distance + weight
        )
        if at least one vertex updated do
            distanceUpdated = true
        end
    end
}

# parallel algo
procedure parallelAlgorithm(numOfThreads) {
    initialize vertices.distance = infinity
    vertices[src].distance = 0

    chunkSize = vertices.amount / numOfThreads
    chunks = array of arrays of size chunkSize

    adjEdges, seqEdges = split_edges(graph.edges, chunks)
    for i := 1 to vertices.amount do
        for edges_subarray in adjEdges do
            thread_task(edges_subarray)
        end
        wait all thread_tasks to finish
        for edge in seqEdges do
            relaxation(edge)
        end
        if no vertices updated then stop running
    end
}
